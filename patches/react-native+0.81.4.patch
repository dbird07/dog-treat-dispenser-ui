diff --git a/node_modules/react-native/Libraries/ActionSheetIOS/ActionSheetIOS.js b/node_modules/react-native/Libraries/ActionSheetIOS/ActionSheetIOS.js
index e556ef5..04ca6fe 100644
--- a/node_modules/react-native/Libraries/ActionSheetIOS/ActionSheetIOS.js
+++ b/node_modules/react-native/Libraries/ActionSheetIOS/ActionSheetIOS.js
@@ -175,7 +175,7 @@ const ActionSheetIOS = {
     );
     invariant(RCTActionSheetManager, "ActionSheetManager doesn't exist");
     RCTActionSheetManager.showShareActionSheetWithOptions(
-      {...options, tintColor: processColor(options.tintColor) as $FlowFixMe},
+      {...options, tintColor: processColor(options.tintColor)},
       failureCallback,
       successCallback,
     );
diff --git a/node_modules/react-native/Libraries/Animated/Animated.js b/node_modules/react-native/Libraries/Animated/Animated.js
index 6c0d430..a85dbb8 100644
--- a/node_modules/react-native/Libraries/Animated/Animated.js
+++ b/node_modules/react-native/Libraries/Animated/Animated.js
@@ -12,7 +12,7 @@ import typeof * as AnimatedExports from './AnimatedExports';
 
 // The AnimatedExports module is typed as multiple exports to allow
 // for an implicit namespace, but underneath is's a single default export.
-const Animated: AnimatedExports = (require('./AnimatedExports') as $FlowFixMe)
+const Animated: AnimatedExports = (require('./AnimatedExports'))
   .default;
 
 export default Animated;
diff --git a/node_modules/react-native/Libraries/Animated/NativeAnimatedAllowlist.js b/node_modules/react-native/Libraries/Animated/NativeAnimatedAllowlist.js
index ac41c77..b5e4859 100644
--- a/node_modules/react-native/Libraries/Animated/NativeAnimatedAllowlist.js
+++ b/node_modules/react-native/Libraries/Animated/NativeAnimatedAllowlist.js
@@ -91,7 +91,7 @@ const SUPPORTED_INTERPOLATION_PARAMS: {[string]: true} = {
  */
 export default {
   style: SUPPORTED_STYLES,
-} as AnimatedPropsAllowlist;
+};
 
 export function allowInterpolationParam(param: string): void {
   SUPPORTED_INTERPOLATION_PARAMS[param] = true;
diff --git a/node_modules/react-native/Libraries/Animated/createAnimatedComponent.js b/node_modules/react-native/Libraries/Animated/createAnimatedComponent.js
index 345c1ac..adfcd01 100644
--- a/node_modules/react-native/Libraries/Animated/createAnimatedComponent.js
+++ b/node_modules/react-native/Libraries/Animated/createAnimatedComponent.js
@@ -75,10 +75,10 @@ export type AnimatedBaseProps<Props: {...}> = {
     : WithAnimatedValue<Props[K]>,
 };
 
-export type AnimatedComponentType<Props: {...}, +Instance = mixed> = component(
-  ref?: React.RefSetter<Instance>,
-  ...AnimatedProps<Props>
-);
+// export type AnimatedComponentType<Props: {...}, +Instance = mixed> = component(
+//   ref?: React.RefSetter<Instance>,
+//   ...AnimatedProps<Props>
+// );
 
 export default function createAnimatedComponent<
   TInstance: React.ComponentType<any>,
diff --git a/node_modules/react-native/Libraries/Animated/nodes/AnimatedProps.js b/node_modules/react-native/Libraries/Animated/nodes/AnimatedProps.js
index 750569f..2569e9e 100644
--- a/node_modules/react-native/Libraries/Animated/nodes/AnimatedProps.js
+++ b/node_modules/react-native/Libraries/Animated/nodes/AnimatedProps.js
@@ -55,7 +55,7 @@ function createAnimatedProps(
           // still need to use the flattened `style` object because static
           // values can shadow `AnimatedNode` values. We need to make sure that
           // we propagate the flattened `style` object to the `props` object.
-          const flatStyle = flattenStyle(value as $FlowFixMe);
+          const flatStyle = flattenStyle(value);
           node = AnimatedStyle.from(flatStyle, allowlist?.style, value);
           staticValue = flatStyle;
         }
diff --git a/node_modules/react-native/Libraries/Animated/useAnimatedProps.js b/node_modules/react-native/Libraries/Animated/useAnimatedProps.js
index b167716..603e7b1 100644
--- a/node_modules/react-native/Libraries/Animated/useAnimatedProps.js
+++ b/node_modules/react-native/Libraries/Animated/useAnimatedProps.js
@@ -15,4 +15,4 @@ import createAnimatedPropsHook from '../../src/private/animated/createAnimatedPr
 /**
  * @deprecated
  */
-export default createAnimatedPropsHook(null) as AnimatedPropsHook;
+export default createAnimatedPropsHook(null);
diff --git a/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js b/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js
index 0e9fd47..80a5910 100644
--- a/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js
+++ b/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js
@@ -60,10 +60,7 @@ export type ActivityIndicatorProps = $ReadOnly<{
   size?: ?IndicatorSize,
 }>;
 
-const ActivityIndicator: component(
-  ref?: React.RefSetter<HostComponent<empty>>,
-  ...props: ActivityIndicatorProps
-) = ({
+const ActivityIndicator = ({
   ref: forwardedRef,
   animating = true,
   color = Platform.OS === 'ios' ? GRAY : null,
@@ -72,9 +69,6 @@ const ActivityIndicator: component(
   size = 'small',
   style,
   ...restProps
-}: {
-  ref?: any,
-  ...ActivityIndicatorProps,
 }) => {
   let sizeStyle;
   let sizeProp;
diff --git a/node_modules/react-native/Libraries/Components/Button.js b/node_modules/react-native/Libraries/Components/Button.js
index 8ae7433..e1224d0 100644
--- a/node_modules/react-native/Libraries/Components/Button.js
+++ b/node_modules/react-native/Libraries/Components/Button.js
@@ -288,10 +288,7 @@ const NativeTouchable:
 
 type ButtonRef = React.ElementRef<typeof NativeTouchable>;
 
-const Button: component(
-  ref?: React.RefSetter<ButtonRef>,
-  ...props: ButtonProps
-) = ({ref, ...props}: {ref?: React.RefSetter<ButtonRef>, ...ButtonProps}) => {
+const Button = ({ref, ...props}) => {
   const {
     accessibilityLabel,
     accessibilityState,
diff --git a/node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js b/node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js
index 01ac874..420a04d 100644
--- a/node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js
+++ b/node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js
@@ -302,4 +302,4 @@ const styles = StyleSheet.create({
   },
 });
 
-export default DrawerLayoutAndroid as $FlowFixMe;
+export default DrawerLayoutAndroid;
diff --git a/node_modules/react-native/Libraries/Components/LayoutConformance/LayoutConformance.js b/node_modules/react-native/Libraries/Components/LayoutConformance/LayoutConformance.js
index ab3afcf..86d4d2d 100644
--- a/node_modules/react-native/Libraries/Components/LayoutConformance/LayoutConformance.js
+++ b/node_modules/react-native/Libraries/Components/LayoutConformance/LayoutConformance.js
@@ -51,7 +51,7 @@ function UnimplementedLayoutConformance(
 
 export default (isFabricUIManagerInstalled
   ? LayoutConformance
-  : UnimplementedLayoutConformance) as component(...LayoutConformanceProps);
+  : UnimplementedLayoutConformance);
 
 const styles = StyleSheet.create({
   container: {
diff --git a/node_modules/react-native/Libraries/Components/Pressable/Pressable.js b/node_modules/react-native/Libraries/Components/Pressable/Pressable.js
index f994e0e..c294b1a 100644
--- a/node_modules/react-native/Libraries/Components/Pressable/Pressable.js
+++ b/node_modules/react-native/Libraries/Components/Pressable/Pressable.js
@@ -343,7 +343,4 @@ function usePressState(forcePressed: boolean): [boolean, (boolean) => void] {
 const MemoedPressable = memo(Pressable);
 MemoedPressable.displayName = 'Pressable';
 
-export default (MemoedPressable: component(
-  ref?: React.RefSetter<React.ElementRef<typeof View>>,
-  ...props: PressableProps
-));
+export default MemoedPressable;
diff --git a/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js b/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js
index aadcb2a..bdf580a 100644
--- a/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js
+++ b/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js
@@ -39,12 +39,7 @@ export type {ProgressBarAndroidProps};
  * },
  * ```
  */
-const ProgressBarAndroid: component(
-  ref?: React.RefSetter<
-    React.ElementRef<typeof ProgressBarAndroidNativeComponent>,
-  >,
-  ...props: ProgressBarAndroidProps
-) = function ProgressBarAndroid({
+const ProgressBarAndroid = function ProgressBarAndroid({
   ref: forwardedRef,
   // $FlowFixMe[incompatible-type]
   styleAttr = 'Normal',
diff --git a/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.js b/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.js
index 7d51999..1f4ac33 100644
--- a/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.js
+++ b/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.js
@@ -21,7 +21,7 @@ export type {ProgressBarAndroidProps};
 // of ProgressBarAndroidProps. TS's Omit does not distribute over unions, so
 // we define our own version which does. This does not affect Flow.
 // $FlowExpectedError[unclear-type]
-type Omit<T, K> = T extends any ? Pick<T, Exclude<$Keys<T>, K>> : T;
+// type Omit<T, K> = T extends any ? Pick<T, Exclude<$Keys<T>, K>> : T;
 
 /**
  * ProgressBarAndroid has been extracted from react-native core and will be removed in a future release.
@@ -29,18 +29,13 @@ type Omit<T, K> = T extends any ? Pick<T, Exclude<$Keys<T>, K>> : T;
  * @see https://github.com/react-native-community/progress-bar-android
  * @deprecated
  */
-let ProgressBarAndroid: component(
-  ref?: React.RefSetter<
-    React.ElementRef<ProgressBarAndroidNativeComponentType>,
-  >,
-  ...props: Omit<ProgressBarAndroidProps, empty>
-);
+let ProgressBarAndroid;
 
 if (Platform.OS === 'android') {
   ProgressBarAndroid = require('./ProgressBarAndroid').default;
 } else {
   ProgressBarAndroid = require('../UnimplementedViews/UnimplementedView')
-    .default as $FlowFixMe;
+    .default;
 }
 
 export default ProgressBarAndroid;
diff --git a/node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js b/node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js
index 34097b8..80cf071 100644
--- a/node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js
+++ b/node_modules/react-native/Libraries/Components/SafeAreaView/SafeAreaView.js
@@ -24,10 +24,7 @@ import * as React from 'react';
  * sensor housing area on iPhone X).
  * @deprecated Use `react-native-safe-area-context` instead. This component will be removed in a future release.
  */
-const SafeAreaView: component(
-  ref?: React.RefSetter<React.ElementRef<typeof View>>,
-  ...props: ViewProps
-) = Platform.select({
+const SafeAreaView = Platform.select({
   ios: require('./RCTSafeAreaViewNativeComponent').default,
   default: View,
 });
diff --git a/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js b/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js
index 8f4f297..7255e61 100644
--- a/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js
+++ b/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js
@@ -389,10 +389,10 @@ export type ScrollViewPropsAndroid = $ReadOnly<{
   fadingEdgeLength?: ?number | {start: number, end: number},
 }>;
 
-type StickyHeaderComponentType = component(
-  ref?: React.RefSetter<$ReadOnly<interface {setNextHeaderY: number => void}>>,
-  ...ScrollViewStickyHeaderProps
-);
+// type StickyHeaderComponentType = component(
+//   ref?: React.RefSetter<$ReadOnly<interface {setNextHeaderY: number => void}>>,
+//   ...ScrollViewStickyHeaderProps
+// );
 
 type ScrollViewBaseProps = $ReadOnly<{
   /**
@@ -1918,16 +1918,10 @@ function createRefForwarder<TNativeInstance, TPublicInstance>(
 // NOTE: This wrapper component is necessary because `ScrollView` is a class
 // component and we need to map `ref` to a differently named prop. This can be
 // removed when `ScrollView` is a functional component.
-const ScrollViewWrapper: component(
-  ref?: React.RefSetter<PublicScrollViewInstance>,
-  ...props: ScrollViewProps
-) = function Wrapper({
+const ScrollViewWrapper = function Wrapper({
   ref,
   ...props
-}: {
-  ref?: React.RefSetter<PublicScrollViewInstance>,
-  ...ScrollViewProps,
-}): React.Node {
+}) {
   return ref == null ? (
     <ScrollView {...props} />
   ) : (
diff --git a/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js b/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js
index d1e5d65..0681758 100644
--- a/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js
+++ b/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js
@@ -43,15 +43,9 @@ interface Instance extends React.ElementRef<typeof Animated.View> {
   +setNextHeaderY: number => void;
 }
 
-const ScrollViewStickyHeader: component(
-  ref: React.RefSetter<Instance>,
-  ...props: ScrollViewStickyHeaderProps
-) = function ScrollViewStickyHeader({
+const ScrollViewStickyHeader = function ScrollViewStickyHeader({
   ref: forwardedRef,
   ...props
-}: {
-  ref?: React.RefSetter<Instance>,
-  ...ScrollViewStickyHeaderProps,
 }) {
   const {
     inverted,
diff --git a/node_modules/react-native/Libraries/Components/Switch/Switch.js b/node_modules/react-native/Libraries/Components/Switch/Switch.js
index d3b88af..4d65077 100644
--- a/node_modules/react-native/Libraries/Components/Switch/Switch.js
+++ b/node_modules/react-native/Libraries/Components/Switch/Switch.js
@@ -163,16 +163,10 @@ type SwitchRef = React.ElementRef<
   export default App;
   ```
  */
-const Switch: component(
-  ref?: React.RefSetter<SwitchRef>,
-  ...props: SwitchProps
-) = function Switch({
+const Switch = function Switch({
   ref: forwardedRef,
   ...props
-}: {
-  ref?: React.RefSetter<SwitchRef>,
-  ...SwitchProps,
-}): React.Node {
+}) {
   const {
     disabled,
     ios_backgroundColor,
diff --git a/node_modules/react-native/Libraries/Components/TextInput/RCTTextInputViewConfig.js b/node_modules/react-native/Libraries/Components/TextInput/RCTTextInputViewConfig.js
index 05bddcb..f401210 100644
--- a/node_modules/react-native/Libraries/Components/TextInput/RCTTextInputViewConfig.js
+++ b/node_modules/react-native/Libraries/Components/TextInput/RCTTextInputViewConfig.js
@@ -167,4 +167,4 @@ const RCTTextInputViewConfig: PartialViewConfigWithoutName = {
   },
 };
 
-export default RCTTextInputViewConfig as PartialViewConfigWithoutName;
+export default RCTTextInputViewConfig;
diff --git a/node_modules/react-native/Libraries/Components/TextInput/TextInput.flow.js b/node_modules/react-native/Libraries/Components/TextInput/TextInput.flow.js
index 5fa8811..e8c862d 100644
--- a/node_modules/react-native/Libraries/Components/TextInput/TextInput.flow.js
+++ b/node_modules/react-native/Libraries/Components/TextInput/TextInput.flow.js
@@ -1155,10 +1155,10 @@ export interface TextInputInstance extends HostInstance {
  * or control this param programmatically with native code.
  *
  */
-type InternalTextInput = component(
-  ref?: React.RefSetter<TextInputInstance>,
-  ...TextInputProps
-);
+// type InternalTextInput = component(
+//   ref?: React.RefSetter<TextInputInstance>,
+//   ...TextInputProps
+// );
 
 export type TextInputComponentStatics = $ReadOnly<{
   State: $ReadOnly<{
diff --git a/node_modules/react-native/Libraries/Components/TextInput/TextInput.js b/node_modules/react-native/Libraries/Components/TextInput/TextInput.js
index 1e95eb6..9ed9fc4 100644
--- a/node_modules/react-native/Libraries/Components/TextInput/TextInput.js
+++ b/node_modules/react-native/Libraries/Components/TextInput/TextInput.js
@@ -879,10 +879,7 @@ const autoCompleteWebToTextContentTypeMap = {
   username: 'username',
 } as const;
 
-const TextInput: component(
-  ref?: React.RefSetter<TextInputInstance>,
-  ...props: React.ElementConfig<typeof InternalTextInput>
-) = function TextInput({
+const TextInput = function TextInput({
   ref: forwardedRef,
   allowFontScaling = true,
   rejectResponderTermination = true,
@@ -972,4 +969,4 @@ const verticalAlignToTextAlignVerticalMap = {
 } as const;
 
 // $FlowFixMe[unclear-type] Unclear type. Using `any` type is not safe.
-export default TextInput as any as TextInputType;
+export default TextInput;
diff --git a/node_modules/react-native/Libraries/Components/Touchable/BoundingDimensions.js b/node_modules/react-native/Libraries/Components/Touchable/BoundingDimensions.js
index 3a68e73..d262986 100644
--- a/node_modules/react-native/Libraries/Components/Touchable/BoundingDimensions.js
+++ b/node_modules/react-native/Libraries/Components/Touchable/BoundingDimensions.js
@@ -48,6 +48,6 @@ BoundingDimensions.getPooledFromElement = function (
   );
 };
 
-PooledClass.addPoolingTo(BoundingDimensions as $FlowFixMe, twoArgumentPooler);
+PooledClass.addPoolingTo(BoundingDimensions, twoArgumentPooler);
 
 export default BoundingDimensions;
diff --git a/node_modules/react-native/Libraries/Components/Touchable/Position.js b/node_modules/react-native/Libraries/Components/Touchable/Position.js
index adb6961..9f3b14a 100644
--- a/node_modules/react-native/Libraries/Components/Touchable/Position.js
+++ b/node_modules/react-native/Libraries/Components/Touchable/Position.js
@@ -35,6 +35,6 @@ Position.prototype.destructor = function () {
   this.top = null;
 };
 
-PooledClass.addPoolingTo(Position as $FlowFixMe, twoArgumentPooler);
+PooledClass.addPoolingTo(Position, twoArgumentPooler);
 
 export default Position;
diff --git a/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js b/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js
index 015afef..9901f82 100644
--- a/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js
+++ b/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js
@@ -410,15 +410,9 @@ class TouchableHighlightImpl extends React.Component<
   }
 }
 
-const TouchableHighlight: component(
-  ref?: React.RefSetter<React.ElementRef<typeof View>>,
-  ...props: $ReadOnly<Omit<TouchableHighlightProps, 'hostRef'>>
-) = ({
+const TouchableHighlight = ({
   ref: hostRef,
   ...props
-}: {
-  ref?: React.RefSetter<React.ElementRef<typeof View>>,
-  ...$ReadOnly<Omit<TouchableHighlightProps, 'hostRef'>>,
 }) => <TouchableHighlightImpl {...props} hostRef={hostRef} />;
 
 TouchableHighlight.displayName = 'TouchableHighlight';
diff --git a/node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js b/node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js
index 8bb207b..b946d17 100644
--- a/node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js
+++ b/node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js
@@ -377,15 +377,9 @@ class TouchableOpacity extends React.Component<
   }
 }
 
-const Touchable: component(
-  ref?: React.RefSetter<React.ElementRef<typeof Animated.View>>,
-  ...props: TouchableOpacityProps
-) = ({
+const Touchable = ({
   ref,
   ...props
-}: {
-  ref?: React.RefSetter<React.ElementRef<typeof Animated.View>>,
-  ...TouchableOpacityProps,
 }) => <TouchableOpacity {...props} hostRef={ref} />;
 
 Touchable.displayName = 'TouchableOpacity';
diff --git a/node_modules/react-native/Libraries/Components/View/View.js b/node_modules/react-native/Libraries/Components/View/View.js
index 94ffb6f..a872194 100644
--- a/node_modules/react-native/Libraries/Components/View/View.js
+++ b/node_modules/react-native/Libraries/Components/View/View.js
@@ -23,10 +23,10 @@ import {use} from 'react';
  *
  * @see https://reactnative.dev/docs/view
  */
-component View(
-  ref?: React.RefSetter<React.ElementRef<typeof ViewNativeComponent>>,
-  ...props: ViewProps
-) {
+function View({
+  ref,
+  ...props
+}) {
   const hasTextAncestor = use(TextAncestorContext);
 
   let actualView;
@@ -53,7 +53,7 @@ component View(
     } = props;
 
     // Since we destructured props, we can now treat it as mutable
-    const processedProps = otherProps as {...ViewProps};
+    const processedProps = otherProps;
 
     const parsedAriaLabelledBy = ariaLabelledBy?.split(/\s*,\s*/g);
     if (parsedAriaLabelledBy !== undefined) {
diff --git a/node_modules/react-native/Libraries/Image/ImageTypes.flow.js b/node_modules/react-native/Libraries/Image/ImageTypes.flow.js
index 5de921b..53c7039 100644
--- a/node_modules/react-native/Libraries/Image/ImageTypes.flow.js
+++ b/node_modules/react-native/Libraries/Image/ImageTypes.flow.js
@@ -66,20 +66,20 @@ type ImageComponentStaticsAndroid = $ReadOnly<{
   abortPrefetch(requestId: number): void,
 }>;
 
-export type AbstractImageAndroid = component(
-  ref?: React.RefSetter<
-    | React.ElementRef<TextInlineImageNativeComponent>
-    | React.ElementRef<ImageViewNativeComponent>,
-  >,
-  ...props: ImagePropsType
-);
+// export type AbstractImageAndroid = component(
+//   ref?: React.RefSetter<
+//     | React.ElementRef<TextInlineImageNativeComponent>
+//     | React.ElementRef<ImageViewNativeComponent>,
+//   >,
+//   ...props: ImagePropsType
+// );
 
 export type ImageAndroid = AbstractImageAndroid & ImageComponentStaticsAndroid;
 
-export type AbstractImageIOS = component(
-  ref?: React.RefSetter<React.ElementRef<ImageViewNativeComponent>>,
-  ...props: ImagePropsType
-);
+// export type AbstractImageIOS = component(
+//   ref?: React.RefSetter<React.ElementRef<ImageViewNativeComponent>>,
+//   ...props: ImagePropsType
+// );
 
 export type ImageIOS = AbstractImageIOS & ImageComponentStaticsIOS;
 
diff --git a/node_modules/react-native/Libraries/Interaction/TouchHistoryMath.js b/node_modules/react-native/Libraries/Interaction/TouchHistoryMath.js
index 897eaff..8c17264 100644
--- a/node_modules/react-native/Libraries/Interaction/TouchHistoryMath.js
+++ b/node_modules/react-native/Libraries/Interaction/TouchHistoryMath.js
@@ -151,32 +151,6 @@ const TouchHistoryMath = {
   },
 
   noCentroid: -1,
-} as {
-  centroidDimension: (
-    touchHistory: TouchHistoryMath,
-    touchesChangedAfter: number,
-    isXAxis: boolean,
-    ofCurrent: boolean,
-  ) => number,
-  currentCentroidXOfTouchesChangedAfter: (
-    touchHistory: TouchHistoryMath,
-    touchesChangedAfter: number,
-  ) => number,
-  currentCentroidYOfTouchesChangedAfter: (
-    touchHistory: TouchHistoryMath,
-    touchesChangedAfter: number,
-  ) => number,
-  previousCentroidXOfTouchesChangedAfter: (
-    touchHistory: TouchHistoryMath,
-    touchesChangedAfter: number,
-  ) => number,
-  previousCentroidYOfTouchesChangedAfter: (
-    touchHistory: TouchHistoryMath,
-    touchesChangedAfter: number,
-  ) => number,
-  currentCentroidX: (touchHistory: TouchHistoryMath) => number,
-  currentCentroidY: (touchHistory: TouchHistoryMath) => number,
-  noCentroid: number,
 };
 
 export default TouchHistoryMath;
diff --git a/node_modules/react-native/Libraries/Lists/SectionListModern.js b/node_modules/react-native/Libraries/Lists/SectionListModern.js
index 2d89633..82a8139 100644
--- a/node_modules/react-native/Libraries/Lists/SectionListModern.js
+++ b/node_modules/react-native/Libraries/Lists/SectionListModern.js
@@ -165,15 +165,9 @@ export type Props<ItemT, SectionT = DefaultSectionT> = $ReadOnly<{
  *   Alternatively, you can provide a custom `keyExtractor` prop.
  *
  */
-const SectionList: component(
-  ref?: React.RefSetter<any>,
-  ...Props<any, DefaultSectionT>
-) = ({
+const SectionList = ({
   ref,
   ...props
-}: {
-  ref?: React.RefSetter<any>,
-  ...Props<any, DefaultSectionT>,
 }) => {
   const propsWithDefaults = {
     stickySectionHeadersEnabled: Platform.OS === 'ios',
diff --git a/node_modules/react-native/Libraries/PermissionsAndroid/PermissionsAndroid.js b/node_modules/react-native/Libraries/PermissionsAndroid/PermissionsAndroid.js
index 886a849..80eecfe 100644
--- a/node_modules/react-native/Libraries/PermissionsAndroid/PermissionsAndroid.js
+++ b/node_modules/react-native/Libraries/PermissionsAndroid/PermissionsAndroid.js
@@ -123,7 +123,7 @@ const PERMISSIONS = Object.freeze({
   UWB_RANGING: 'android.permission.UWB_RANGING',
   POST_NOTIFICATIONS: 'android.permission.POST_NOTIFICATIONS',
   NEARBY_WIFI_DEVICES: 'android.permission.NEARBY_WIFI_DEVICES',
-}) as PermissionsType;
+});
 
 /**
  * `PermissionsAndroid` provides access to Android M's new permissions model.
diff --git a/node_modules/react-native/Libraries/ReactNative/AppContainer.js b/node_modules/react-native/Libraries/ReactNative/AppContainer.js
index 697be80..4b08b6f 100644
--- a/node_modules/react-native/Libraries/ReactNative/AppContainer.js
+++ b/node_modules/react-native/Libraries/ReactNative/AppContainer.js
@@ -24,7 +24,7 @@ export type Props = $ReadOnly<{
   internal_excludeInspector?: boolean,
 }>;
 
-const AppContainer: component(...Props) = __DEV__
+const AppContainer = __DEV__
   ? require('./AppContainer-dev').default
   : require('./AppContainer-prod').default;
 
diff --git a/node_modules/react-native/Libraries/ReactNative/getCachedComponentWithDebugName.js b/node_modules/react-native/Libraries/ReactNative/getCachedComponentWithDebugName.js
index 6b58118..820d28b 100644
--- a/node_modules/react-native/Libraries/ReactNative/getCachedComponentWithDebugName.js
+++ b/node_modules/react-native/Libraries/ReactNative/getCachedComponentWithDebugName.js
@@ -10,7 +10,7 @@
 
 import * as React from 'react';
 
-type NoopComponent = component(children: React.Node);
+// type NoopComponent = component(children: React.Node);
 
 const cache: Map<
   string, // displayName
diff --git a/node_modules/react-native/Libraries/ReactNative/renderApplication.js b/node_modules/react-native/Libraries/ReactNative/renderApplication.js
index d135d45..04f7dd6 100644
--- a/node_modules/react-native/Libraries/ReactNative/renderApplication.js
+++ b/node_modules/react-native/Libraries/ReactNative/renderApplication.js
@@ -24,12 +24,12 @@ import * as React from 'react';
 // require BackHandler so it sets the default handler that exits the app if no listeners respond
 import '../Utilities/BackHandler';
 
-type ActivityType = component(
-  ...{
-    mode: 'visible' | 'hidden',
-    children: React.Node,
-  }
-);
+// type ActivityType = component(
+//   ...{
+//     mode: 'visible' | 'hidden',
+//     children: React.Node,
+//   }
+// );
 
 export default function renderApplication<Props: Object>(
   RootComponent: React.ComponentType<Props>,
diff --git a/node_modules/react-native/Libraries/StyleSheet/StyleSheet.js b/node_modules/react-native/Libraries/StyleSheet/StyleSheet.js
index 3bbfa90..11fe37e 100644
--- a/node_modules/react-native/Libraries/StyleSheet/StyleSheet.js
+++ b/node_modules/react-native/Libraries/StyleSheet/StyleSheet.js
@@ -27,7 +27,7 @@ import type {
 } from './StyleSheetTypes';
 
 const StyleSheet: StyleSheetExports = (
-  require('./StyleSheetExports') as $FlowFixMe
+  require('./StyleSheetExports')
 ).default;
 
 export type {
diff --git a/node_modules/react-native/Libraries/Text/Text.js b/node_modules/react-native/Libraries/Text/Text.js
index b08b8f3..5cc233c 100644
--- a/node_modules/react-native/Libraries/Text/Text.js
+++ b/node_modules/react-native/Libraries/Text/Text.js
@@ -35,10 +35,7 @@ type TextForwardRef = React.ElementRef<
  *
  * @see https://reactnative.dev/docs/text
  */
-const TextImpl: component(
-  ref?: React.RefSetter<TextForwardRef>,
-  ...props: TextProps
-) = ({
+const TextImpl = ({
   ref: forwardedRef,
   accessible,
   accessibilityLabel,
@@ -472,16 +469,10 @@ type NativePressableTextProps = $ReadOnly<{
  * This logic is split out from the main Text component to enable the more
  * expensive pressability logic to be only initialized when needed.
  */
-const NativePressableVirtualText: component(
-  ref: React.RefSetter<TextForwardRef>,
-  ...props: NativePressableTextProps
-) = ({
+const NativePressableVirtualText = ({
   ref: forwardedRef,
   textProps,
   textPressabilityProps,
-}: {
-  ref?: React.RefSetter<TextForwardRef>,
-  ...NativePressableTextProps,
 }) => {
   const [isHighlighted, eventHandlersForText] = useTextPressability(
     textPressabilityProps,
@@ -504,16 +495,10 @@ const NativePressableVirtualText: component(
  * This logic is split out from the main Text component to enable the more
  * expensive pressability logic to be only initialized when needed.
  */
-const NativePressableText: component(
-  ref: React.RefSetter<TextForwardRef>,
-  ...props: NativePressableTextProps
-) = ({
+const NativePressableText = ({
   ref: forwardedRef,
   textProps,
   textPressabilityProps,
-}: {
-  ref?: React.RefSetter<TextForwardRef>,
-  ...NativePressableTextProps,
 }) => {
   const [isHighlighted, eventHandlersForText] = useTextPressability(
     textPressabilityProps,
diff --git a/node_modules/react-native/Libraries/vendor/core/ErrorUtils.js b/node_modules/react-native/Libraries/vendor/core/ErrorUtils.js
index db7762d..d070b71 100644
--- a/node_modules/react-native/Libraries/vendor/core/ErrorUtils.js
+++ b/node_modules/react-native/Libraries/vendor/core/ErrorUtils.js
@@ -48,4 +48,4 @@ export type ErrorUtils = {
  * that use it aren't just using a global variable, so simply export the global
  * variable here. ErrorUtils is originally defined in a file named error-guard.js.
  */
-export default global.ErrorUtils as ErrorUtils;
+export default global.ErrorUtils;
diff --git a/node_modules/react-native/index.js b/node_modules/react-native/index.js
index c737c93..f4c26f7 100644
--- a/node_modules/react-native/index.js
+++ b/node_modules/react-native/index.js
@@ -337,7 +337,7 @@ module.exports = {
       .VirtualViewMode;
   },
   // #endregion
-} as ReactNativePublicAPI;
+};
 
 if (__DEV__) {
   /* $FlowFixMe[prop-missing] This is intentional: Flow will error when
diff --git a/node_modules/react-native/jest/mockNativeComponent.js b/node_modules/react-native/jest/mockNativeComponent.js
index 117171d..ffc4481 100644
--- a/node_modules/react-native/jest/mockNativeComponent.js
+++ b/node_modules/react-native/jest/mockNativeComponent.js
@@ -15,10 +15,10 @@ import {createElement} from 'react';
 
 let nativeTag = 1;
 
-type MockNativeComponent<TProps: {...}> = component(
-  ref?: ?React.RefSetter<HostInstance>,
-  ...props: TProps
-);
+// type MockNativeComponent<TProps: {...}> = component(
+//   ref?: ?React.RefSetter<HostInstance>,
+//   ...props: TProps
+// );
 
 export default function mockNativeComponent<TProps: {...}>(
   viewName: string,
diff --git a/node_modules/react-native/jest/mocks/Modal.js b/node_modules/react-native/jest/mocks/Modal.js
index c9000e1..4b8c3c1 100644
--- a/node_modules/react-native/jest/mocks/Modal.js
+++ b/node_modules/react-native/jest/mocks/Modal.js
@@ -14,7 +14,7 @@ import typeof * as TmockComponent from '../mockComponent';
 const mockComponent =
   jest.requireActual<TmockComponent>('../mockComponent').default;
 
-type TModal = component(...ModalProps);
+// type TModal = component(...ModalProps);
 
 const BaseComponent = mockComponent(
   '../Libraries/Modal/Modal',
diff --git a/node_modules/react-native/src/private/components/safeareaview/SafeAreaView_INTERNAL_DO_NOT_USE.js b/node_modules/react-native/src/private/components/safeareaview/SafeAreaView_INTERNAL_DO_NOT_USE.js
index 3bb3530..d3e5bc0 100644
--- a/node_modules/react-native/src/private/components/safeareaview/SafeAreaView_INTERNAL_DO_NOT_USE.js
+++ b/node_modules/react-native/src/private/components/safeareaview/SafeAreaView_INTERNAL_DO_NOT_USE.js
@@ -15,10 +15,7 @@ import UIManager from '../../../../Libraries/ReactNative/UIManager';
 import Platform from '../../../../Libraries/Utilities/Platform';
 import * as React from 'react';
 
-const exported: component(
-  ref?: React.RefSetter<React.ElementRef<typeof View>>,
-  ...ViewProps
-) = Platform.select({
+const exported = Platform.select({
   ios: require('../../../../src/private/specs_DEPRECATED/components/RCTSafeAreaViewNativeComponent')
     .default,
   android: UIManager.hasViewManagerConfig('RCTSafeAreaView')
diff --git a/node_modules/react-native/src/private/components/virtualview/VirtualView.js b/node_modules/react-native/src/private/components/virtualview/VirtualView.js
index 051e596..b42cfcf 100644
--- a/node_modules/react-native/src/private/components/virtualview/VirtualView.js
+++ b/node_modules/react-native/src/private/components/virtualview/VirtualView.js
@@ -46,13 +46,13 @@ export type ModeChangeEvent = $ReadOnly<{
   target: ReadOnlyElement,
 }>;
 
-type VirtualViewComponent = component(
-  children?: React.Node,
-  nativeID?: string,
-  ref?: ?React.RefSetter<React.ElementRef<typeof VirtualViewNativeComponent>>,
-  style?: ?ViewStyleProp,
-  onModeChange?: (event: ModeChangeEvent) => void,
-);
+// type VirtualViewComponent = component(
+//   children?: React.Node,
+//   nativeID?: string,
+//   ref?: ?React.RefSetter<React.ElementRef<typeof VirtualViewNativeComponent>>,
+//   style?: ?ViewStyleProp,
+//   onModeChange?: (event: ModeChangeEvent) => void,
+// );
 
 type HiddenHeight = number;
 const NotHidden = null;
@@ -62,12 +62,12 @@ type State = HiddenHeight | typeof NotHidden;
 function createVirtualView(initialState: State): VirtualViewComponent {
   const initialHidden = initialState !== NotHidden;
 
-  component VirtualView(
-    children?: React.Node,
-    nativeID?: string,
-    ref?: ?React.RefSetter<React.ElementRef<typeof VirtualViewNativeComponent>>,
-    style?: ?ViewStyleProp,
-    onModeChange?: (event: ModeChangeEvent) => void,
+  function VirtualView({
+    children,
+    nativeID,
+    ref,
+    style,
+    onModeChange,
   ) {
     const [state, setState] = useState<State>(initialState);
     if (__DEV__) {
diff --git a/node_modules/react-native/src/private/types/HostComponent.js b/node_modules/react-native/src/private/types/HostComponent.js
index 3085ec3..6735e03 100644
--- a/node_modules/react-native/src/private/types/HostComponent.js
+++ b/node_modules/react-native/src/private/types/HostComponent.js
@@ -10,7 +10,7 @@
 
 import type {HostInstance} from './HostInstance';
 
-export type HostComponent<Config: {...}> = component(
-  ref?: React.RefSetter<HostInstance>,
-  ...Config
-);
+// export type HostComponent<Config: {...}> = component(
+//   ref?: React.RefSetter<HostInstance>,
+//   ...Config
+// );
